/*DDL */

CREATE DATABASE bd_blamovi;

/*Usa o banco de dados selecionado*/
USE bd_blamovi;



CREATE TABLE tb_usuarios(
	id_usuario BINARY(16) NOT NULL,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    nickname TINYINT NOT NULL unique,
    nascimento DATE,
    PRIMARY KEY(id_usuario)
);

CREATE TABLE tb_post(
	id_post BINARY(16) NOT NULL,
    texto VARCHARL(255),
    foto VARCHAR(255),
    FOREIGN KEY(id_usuario) REFERENCES tb_usuarios(id_usuarios),
    FOREIGN KEY(id_comentario) REFERENCES tb_comentario(id_comentario),
    PRIMARY KEY(id_post)
);


CREATE TABLE tb_curtida(
	id_curtida BINARY(16) NOT NULL,
    FOREIGN KEY(id_video) REFERENCES tb_video(id_video)
    PRIMARY KEY(id_curtida)
);

CREATE TABLE tb_video(
	id_video BINARY(16) NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    sinopse TEXT NOT NULL,
    diretor VARCHAR(30) NOT NULL,
    genero VARCHAR(30) not NULL,
    duracao VARCHAR(30) not NULL,
    temporada VARCHAR(30) not NULL,
    
    ano YEAR NOT NULL,
    id_cliente BINARY(16) NOT NULL,
    id_dev BINARY(16),
    PRIMARY KEY(id_video),
    FOREIGN KEY(id_usuario) REFERENCES tb_usuarios(id_usuario),
    FOREIGN KEY(id_comentario) REFERENCES tb_comentario(id_comentario),
    FOREIGN KEY(id_curtida) REFERENCES tb_curtida(id_curtida),
    FOREIGN KEY(id_elenco) REFERENCES tb_elenco(id_elenco)
);

CREATE TABLE tb_comentarios(
	id_comentarios BINARY(16) NOT NULL,
    texto VARCHARL(255),
    PRIMARY KEY(id_comentarios),
    FOREIGN KEY(id_post) REFERENCES tb_post(id_post),
    
);

CREATE TABLE tb_elenco(
	id_elenco BINARY(16) NOT NULL,
  foto_elenco VARCHAR(255) NOT NULL,
  nome_elenco VARCHAR(30) NOT NULL,
  papel_elenco VARCHAR(30) NOT NULL,
    PRIMARY KEY(id_elenco) ,
    FOREIGN KEY(id_video) REFERENCES tb_video(id_video)
);

/*DML */

USE bd_blamovi;

/*INSERT INTO tb_techs VALUES (UUID_TO_BIN(UUID()), "html");
INSERT INTO tb_techs VALUES (UUID_TO_BIN(UUID()), "css");*/

/*INSERT INTO tb_techs VALUES
	(UUID_TO_BIN(UUID()), "html"),
    (UUID_TO_BIN(UUID()), "css");*/
    
SELECT BIN_TO_UUID(id_tech), nome FROM tb_techs;

INSERT INTO tb_usuarios VALUES(
	UUID_TO_BIN(UUID()),
    "Odirlei",
    "odirlei@email.com",
    "senai",
    "Odin01",
    "20/10/2010",
    0
);
INSERT INTO tb_usuarios VALUES(
	UUID_TO_BIN(UUID()),
    "Jessica",
    "jessica@email.com",
    "senai",
    "Odin02",
    "20/10/2010",
    0
);
INSERT INTO tb_usuarios VALUES(
	UUID_TO_BIN(UUID()),
    "Aléxia",
    "alexia@email.com",
    "senai",
    "Odin03",
    "20/10/2010",
    0
);

SELECT * FROM tb_usuarios;

SELECT BIN_TO_UUID(id_usuario), nome FROM tb_usuarios;
/*SELECT BIN_TO_UUID(id_tech), nome FROM tb_techs;*/


/*DELETE FROM tb_usuarios WHERE id_usuario = UUID_TO_BIN("cdb42874-6edc-11ee-8397-a4bb6d746e70");

UPDATE tb_usuarios 
SET tipo_usuario = 1
WHERE id_usuario = UUID_TO_BIN("3995dca8-6ed9-11ee-8397-a4bb6d746e70");

INSERT INTO tb_dev_tech VALUES(UUID_TO_BIN("d17053bd-6edc-11ee-8397-a4bb6d746e70"), UUID_TO_BIN("2c1533dc-6ed8-11ee-8397-a4bb6d746e70"));
INSERT INTO tb_dev_tech VALUES(UUID_TO_BIN("d17053bd-6edc-11ee-8397-a4bb6d746e70"), UUID_TO_BIN("f27ac791-6ed7-11ee-8397-a4bb6d746e70"));*/

INSERT INTO tb_video VALUES
    (UUID_TO_BIN(UUID()), "Duro de Matar 7", "Conta a história de um cabra que não morre de jeito nenhum(vaso ruím não quebra.", "Zé nínguém", "Ficção", "130 min","sem temporadas","2050"),
    (UUID_TO_BIN(UUID()), "Duro de Matar 8", "Conta a história de um cabra que não morre de jeito nenhum(vaso ruím não quebra.", "Zé nínguém", "Ficção", "130 min","sem temporadas","2052"),
    (UUID_TO_BIN(UUID()), "Duro de Matar 9", "Conta a história de um cabra que não morre de jeito nenhum(vaso ruím não quebra.", "Zé nínguém", "Ficção", "130 min","sem temporadas","2050"),
SELECT BIN_TO_UUID(id_video), titulo,sinopse,duracao, genero FROM tb_video;


INSERT INTO tb_comentarios VALUES
(UUID_TO_BIN(UUID()),"O detetive John McClane viaja para a Rússia para tentar ajudar o filho, Jack. Lá, ele descobre que o rapaz trabalha para a CIA e está tentando evitar uma guerra nuclear."),
(UUID_TO_BIN(UUID()),"O detetive John McClane viaja para a Rússia para tentar ajudar o filho, Jack. Lá, ele descobre que o rapaz trabalha para a CIA e está tentando evitar uma guerra nuclear."),
(UUID_TO_BIN(UUID()),"O detetive John McClane viaja para a Rússia para tentar ajudar o filho, Jack. Lá, ele descobre que o rapaz trabalha para a CIA e está tentando evitar uma guerra nuclear."),  
SELECT BIN_TO_UUID(id_comentario), texto FROM tb_comentario;

/*post*/
INSERT INTO tb_post VALUES
(UUID_TO_BIN(UUID()),"O detetive John McClane viaja para a Rússia para tentar ajudar o filho, Jack. Lá, ele descobre que o rapaz trabalha para a CIA e está tentando evitar uma guerra nuclear.","ISSO SUSBSTITUI A FOTO"),
(UUID_TO_BIN(UUID()),"O detetive John McClane viaja para a Rússia para tentar ajudar o filho, Jack. Lá, ele descobre que o rapaz trabalha para a CIA e está tentando evitar uma guerra nuclear.","ISSO SUSBSTITUI A FOTO"),
(UUID_TO_BIN(UUID()),"O detetive John McClane viaja para a Rússia para tentar ajudar o filho, Jack. Lá, ele descobre que o rapaz trabalha para a CIA e está tentando evitar uma guerra nuclear.","ISSO SUSBSTITUI A FOTO"),
SELECT BIN_TO_UUID(id_post), texto, foto FROM tb_post;
/* fim post*/

/* DQL */

USE bd_blamovi;

SELECT MIN(duracao) FROM tb_video;

SELECT MAX(duracao) FROM tb_video;

SELECT titulo, duracao, sinopse, elenco, diretor FROM tb_video WHERE duracao = (SELECT MIN(duracao) FROM tb_video);

SELECT COUNT(id_video) FROM tb_video;

/*SELECT COUNT(id_servico), status_servico FROM tb_servicos WHERE status_servico = "Em andamento";

SELECT COUNT(id_servico), status_servico FROM tb_servicos GROUP BY status_servico;

SELECT SUM(proposta) FROM tb_servicos;

SELECT * FROM tb_servicos WHERE tb_servicos.titulo LIKE "Dashboard";

SELECT titulo FROM tb_servicos ORDER BY titulo ASC;

SELECT proposta FROM tb_servicos ORDER BY proposta DESC;*/

/*INNER JOIN*/
SELECT titulo, tb_video FROM tb_video INNER JOIN tb_elenco.nomeElenco, tb_elenco.fotoElenco, tb_texto;

SELECT * FROM tb_comentario INNER JOIN tb_video ON tb_curtidas.id_video = tb_post.id_usuario
INNER JOIN tb_usuarios ON tb_comentario.id_video = tb_curtida.id_video;

SELECT tb_post.texto,tb_post.foto, tb_usuarios.nome FROM tb_post 
INNER JOIN tb_comentarios ON tb_comentarios.id_usuario = tb_comentario.id_comentario
INNER JOIN tb_video ON tb_usuario.idu_suario

/*DQL */